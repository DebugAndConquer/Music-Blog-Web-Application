@extends('layouts.app')
@section('content')
<div class="container">
    {{-- Display the post before showing comments belonging to it --}}
    <div class="card mt-3 ml-3 mr-3 mb-5"
        style="border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; border-bottom:1px solid black;">
        <div class="card-header">
            <h2>{{$post->post_title}}</h2>
        </div>
        <div class="card-body">
            <h5>{{$post->post_content}}</h5>
        </div>
        @if(null !== ($post->image))
        <div class="card-footer">
            <img class="card-img-top" src="{{Storage::url($post->image)}}" alt="">
        </div>
        @endif
        <div class="card" style="border-left:0px; border-right:0px; border-top:0px;">
            <div class="card-footer">
                <h6 style="text-align:right">Posted by: {{$post->user->name}} on {{$post->user->created_at}}&nbsp
                </h6>
            </div>
        </div>
        @if (Auth::id() == $post->user->id)
        <div class="col-lg-12 text-center">
            <button type="button" class="btn btn-link" onclick="location.href = '/{{$post->id}}/edit';">Edit
                Post</button>
            <form method="POST" action="/{{$post->id}}">
                {{method_field('DELETE')}}
                @csrf
                <button name="submit" id="submit" type="submit" class="btn btn-link">Delete This Post</button>
            </form>
        </div>
        <hr>
        @endif
        {{-- Displaying the comments section --}}
        <h4 style="text-align:center; font-weight:bold">Comments:</h4>
        <div class="card-footer">
            <div class="row">
                <div class="form group col-lg-6">
                    {{-- Checking rather a user is logged in before allowing him/her to post any comment --}}
                    @if(null !== Auth::id())
                    <input type="text" id="content" name="content" class="form-control" placeholder="Say something!"
                        v-model="commentBox" required>
                    @else
                    <input type="text" class="form-control" placeholder="Only Logged In Users May Post/View Comments"
                        disabled="disabled">
                    @endif
                </div>
                <div class="form group col-lg-4">
                    @if(null !== Auth::id())
                    <button class="btn btn-dark" @click.prevent="postComment">Comment</button>
                    @endif
                </div>
            </div>
        </div>
        {{-- v-for will loop through all comments and display each of them --}}
        <div class="card" v-for="comment in comments">
            <div class="card-header">
                <div class="row">
                    <h6>Commented by:&nbsp</h6>
                    {{-- using @{{}} syntax to print variables generated by vue.js --}}
                    <h6 style="font-weight:bold">@{{comment.user.name}}</h6>
                    <h6>&nbsp on @{{comment.created_at}}</h6>
                </div>
            </div>
            <div class="card-body">
                <h6>@{{comment.comment_content}}</h6>
            </div>
            {{-- v-if will allow editing only for the authors of the comments --}}
            <div class="col-lg-12 text-center" v-if="editable(comment)">
                <button type="button" class="btn btn-link"
                    @click.prevent="current = getCommId (comment); state = 'editing'">Edit
                    Comment</button>
                <button type="button" class="btn btn-link" @click.prevent="deleteComment(comment)">Delete
                    Comment</button>
                {{-- v-if will make sure the editing dialog is displayed only under the comment which the user wants to edit --}}
                <div v-if="current === comment.id">
                    <div v-show="state === 'editing'">
                        <div>
                            <h3>Update Comment</h3>
                        </div>
                        <textarea v-model="newBox" placeholder="Update comment" class="border"></textarea>
                        <div>
                            <button class="btn btn-dark" @click.prevent="saveEdit(comment)">Update</button>
                            <button class="btn btn-dark" @click.prevent="resetEdit">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    {{-- The following vue.js scripts is responsible for comment display, creatation, editing and deletion using AJAX approach --}}
    <script>
        const app = new Vue({
                    el: '#app',
                    data: {
                        state: 'default', //either default or editing
                        comments: {}, //An array of all comments extracted from the db
                        commentBox: '', //Current contents of a comment textbox
                        newBox: '', //Current contents of an edit comment textbox
                        post: {!! $post->toJson() !!}, //The post information that all comments belong to
                        user: {!! Auth::check() ? Auth::user()->toJson() : 'null' !!}, //Current logged in user
                        current: ''
                    },
                    //When vue is ready all current comments are being displayed
                    mounted() {
                        Vue.config.devtools = true;
                        this.getComments();
                    },
                    methods: {
                        //A comment is editable when the author of a comment and a currently logged in user is the same person
                        editable(curComment) {
                            return this.user.id === curComment.user_id;
                        },
                        //Gets all comments from the db and saves them in the local comments array
                        getComments() {
                            axios.get('/api/'+this.post.id+'/comments')
                                 .then((response) => {
                                     this.comments = response.data
                                 })
                                 .catch(function (error) {
                                     console.log(error);
                                 }
                            );
                        },
                        //Posts the comment which was typed in textbox under a curently logged in user name
                        postComment() {
                            axios.post('/api/'+this.post.id+'/comment', {
                            api_token: this.user.api_token,
                            comment_content: this.commentBox
                            })
                                .then((response) => {
                                    this.comments.unshift(response.data);
                                    //Clear the textbox after the successful post
                                    this.commentBox = '';
                                })
                                .catch(function (error) {
                                     console.log(error.response);
                                 })
                        },
                        // Sends a request to delete a comment and updates the view
                        deleteComment(cur) {
                            axios.delete('/api/'+this.post.id+'/comments/'+cur.id)
                            .then(resp => {
                            this.getComments();
                            })
                            .catch(error => {
                            console.log(error);
                            })
                        },
                        //Submits the patch request and updates the view when the update comment button is pressed
                        saveEdit(cur) {
                            this.state = 'default';
                            axios.patch('/api/'+this.post.id+'/comments/'+cur.id, {
                            comment_content: this.newBox
                            })
                                .then(res => {
                                    this.getComments();
                                })
                                .catch(error => {
                                    console.log(error);
                                })
                        },
                        //Resets the state and clears the textbox when cancel edit button is pressed
                        resetEdit() {
                            this.state = 'default';
                            this.newBox = '';
                        },
                        //Gets the id of the comment under which the edit button is pressed
                        getCommId(cur) {
                            axios.get('/api/'+this.post.id+'/comments/'+cur.id)
                                 .then(res => {
                                     this.current = cur.id;
                                 })
                                 .catch(error => {
                                    console.log(error.response);
                                })
                        }

                    }
                });
    </script>

    @endsection